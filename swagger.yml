swagger: '2.0'
info:
  title: Oak
  description: >-
    This document defines the specification for the Oak RESTful API. Oak is a
    platform where students can rate and share their thoughts  on UofT courses.
  termsOfService: 'http://oakapp.io/terms'
  contact:
    email: apiteam@oakapp.io
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 1.0.0
host: 'localhost:3000'
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/vnd.oak.v1

# ----------------------------------------------------------------------------
# Tags
# ----------------------------------------------------------------------------

tags:
  - name: course
    description: Everything about courses
  - name: user
    description: Everything about users
  - name: comment
    description: Everything about comments
  - name: rating
    description: Everything about ratings
  - name: term
    description: Everything about terms

# ----------------------------------------------------------------------------
# Define reusable parameters
# ----------------------------------------------------------------------------

parameters:
  skipParam:
    name: skip
    in: query
    description: number of items to skip
    required: true
    type: integer
    format: int32
  limitParam:
    name: limit
    in: query
    description: max records to return
    required: true
    type: integer
    format: int32

# ----------------------------------------------------------------------------
# Define reusable responses
# ----------------------------------------------------------------------------

responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  UnprocessableEntity:
    description: The server understands the content-type of the request, the syntax is correct, but the request was not what the server expected.
    schema:
      $ref: '#/definitions/Fail'

# ----------------------------------------------------------------------------
# Endpoints
# ----------------------------------------------------------------------------

paths:
  /auth:
    parameters:
      - name: user
        description: The user to create
        required: true
        in: body
        schema:
          type: object
          required:
          - name
          - nickname
          - email
          - password
          - password_confirmation
          properties:
            name:
              type: string
              description: The full name of the user
            nickname:
              type: string
              description: The user's nickname
            email:
              type: string
              description: The user's email address
            password:
              type: string
              description: The user's password
            password_confirmation:
              type: string
              description: The user's password again
          example:
            name: 'Richard Hendricks'
            nickname: 'Richard'
            email: 'richard@piedpiper.io'
            password: 'abc123'
            password_confirmation: 'abc123'
    post:
      description: Create a new user.
      tags:
        - user
      responses:
        201:
          description: Creates a new user
          schema:
            allOf:
            - $ref: '#/definitions/Success'
            - type: object
              properties:
                status:
                  type: string
                  enum: ['success']
                data:
                  $ref: '#/definitions/User'
          headers:
            access-token:
              description: An access token that can be used to perform subsequent requests as the logged-in user.
              type: string
            token-type:
              description: The type of token used to authenticate.
              type: string
              enum: ['Bearer']
            client:
              description: The client token.
              type: string
            uid:
              description: The user's unique id.
              type: string
            expiry:
              description: The expiry time of the access token
              type: integer
        422:
          $ref: '#/responses/UnprocessableEntity'
  /auth/sign_in:
    parameters:
    - name: email
      description: The email address of the user to log in
      in: header
      type: string
      required: true
    - name: password
      description: The password of the user to log in
      in: header
      type: string
      required: true
    post:
      description: Sign in the provided user. This route provides API authentication token as a response, which is used to access authenticated API routes.
      tags:
      - user
      responses:
        200:
          description: The user is now signed in.
          schema:
            allOf:
            - $ref: '#/definitions/Success'
            - type: object
              properties:
                status:
                  type: string
                  enum: ['success']
                data:
                  $ref: '#/definitions/User'
          headers:
            access-token:
              description: An access token that can be used to perform subsequent requests as the logged-in user.
              type: string
            token-type:
              description: The type of token used to authenticate.
              type: string
              enum: ['Bearer']
            client:
              description: The client token.
              type: string
            uid:
              description: The user's unique id.
              type: string
            expiry:
              description: The expiry time of the access token
              type: integer
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /users:
    parameters:
    - $ref: '#/parameters/skipParam'
    - $ref: '#/parameters/limitParam'
    get:
      description: Return all the users.
      tags:
        - user
      responses:
        200:
          description: Get all users
          schema:
            allOf:
            - $ref: '#/definitions/Success'
            - type: object
              properties:
                status:
                  type: string
                  enum: ['success']
                data:
                  type: array
                  items:
                    $ref: '#/definitions/User'
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the course
        required: true
        type: integer
    get:
      tags:
        - user
      responses:
        200:
          description: Successful response
          schema:
            allOf:
            - $ref: '#/definitions/Success'
            - type: object
              properties:
                status:
                  type: string
                  enum: ['success']
                data:
                  $ref: '#/definitions/User'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /users/{id}/terms:
    parameters:
      - name: id
        in: path
        description: ID of the course
        required: true
        type: integer
    get:
      tags:
        - user
      responses:
        200:
          description: Successful response
          schema:
            allOf:
            - $ref: '#/definitions/Success'
            - type: object
              properties:
                status:
                  type: string
                  enum: ['success']
                data:
                  type: array
                  items:
                    $ref: '#/definitions/Term'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"  
  /courses:
    parameters:
      - $ref: '#/parameters/skipParam'
      - $ref: '#/parameters/limitParam'
    get:
      tags:
        - course
      responses:
        200:
          description: A list of courses is returned
  /courses/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the course
        required: true
        type: integer
    get:
      tags:
        - course
      responses:
        200:
          description: A course is returned
          schema:
            allOf:
            - $ref: '#/definitions/Success'
            - type: object
              properties:
                data:
                  $ref: '#/definitions/Course'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"  
  /courses/{id}/comments:
    parameters:
      - name: id
        in: path
        description: ID of the course
        required: true
        type: integer
      - $ref: '#/parameters/skipParam'
      - $ref: '#/parameters/limitParam'
    get:
      tags:
        - comment
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Comment'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"  
    post:
      tags:
        - comment
      parameters:
        - name: comment
          in: body
          description: The comment to create
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        201:
          description: The comment was created successfully
          schema:
            $ref: '#/definitions/Comment'
  /courses/{id}/ratings:
    parameters:
      - name: id
        in: path
        description: ID of the course
        required: true
        type: integer
      - $ref: '#/parameters/skipParam'
      - $ref: '#/parameters/limitParam'
    get:
      tags:
        - rating
      responses:
        200:
          description: A list of ratings for the course
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /comments/{id}:
    parameters:
    - name: id
      in: path
      description: ID of the course
      required: true
      type: integer
    put:
      tags:
      - comment
      parameters:
      - name: comment
        in: body
        description: The comment to create
        required: true
        schema:
          $ref: '#/definitions/Comment'
      responses:
        200:
          description: The comment was updated successfully
          schema:
            $ref: '#/definitions/Comment'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /comments/{id}/reply:
    parameters:
    - name: id
      in: path
      description: ID of the course
      required: true
      type: integer
    post:
      tags:
      - comment
      parameters:
      - name: comment
        in: body
        required: true
        schema:
          properties:
            body:
              type: string
      responses:
        201:
          description: The reply was created successfully
          schema:
            $ref: '#/definitions/Comment'
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
  /ratings:
    post:
      tags:
        - rating
      parameters:
        - name: rating
          in: body
          description: The rating to create
          required: true
          schema:
            $ref: '#/definitions/Rating'
      responses:
        201:
          description: The rating was created successfully
          schema:
            $ref: '#/definitions/Rating'

# ----------------------------------------------------------------------------
# Reusable model defintions
# ----------------------------------------------------------------------------

definitions:
  Success:
    type: object
    description: All went well, and (usually) some data was returned.
    properties:
      status:
        type: string
      data:
        type: object
        description: Optional data returned from server
    required:
      - status
      - data
  Fail:
    type: object
    description: There was a problem with the data submitted, or some pre-condition of the API call wasn't satisfied
    properties:
      status:
        type: string
      data:
        type: object
    required:
      - status
      - data
    example:
      status: "error"
      data:
        error: "Something is wrong in your request"
  Error:
    type: object
    description: An error occurred in processing the request, i.e. an exception was thrown
    properties:
      status:
        type: string
      message:
        type: string
    required:
      - status
      - message
    example:
      status: "error"
      message: "There was an error processing your request."
  User:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      nickname:
        type: string
      image:
        type: string
      user_url:
        type: string
    example:
      id: 1
      name: Umar Ahmed
      nickname: Umar
      image: null
      user_url: 'http://localhost:3000/users/1'
  Course:
    type: object
    properties:
      id:
        type: integer
      code:
        type: string
        description: Six character unique alphanumeric code
      title:
        type: string
        description: The official name of the course
      department:
        type: string
        description: The department in which the course is offered
      division:
        type: string
        description: The division that hosts the department
      level:
        type: integer
        description: The level of the course (ie. 100, 200, 300, or 400)
      campus:
        type: string
        description: The campus that the course is offered at
      course_url:
        type: string
      terms_url:
        type: string
      comments_url:
        type: string
    example:
      id: 1
      code: CSC108
      title: "Introduction to Computer Programming"
      department: "Department of Computer Science"
      division: "Arts and Science"
      level: 100
      campus: "UTSG"
      course_url: "http://localhost:3000/courses/1"
      terms_url: "http://localhost:3000/terms/34"
      comments_url: "http://localhost:3000/courses/1/comments"
  Term:
    type: object
    properties:
      id:
        type: integer
      term:
        type: string
      description:
        type: string
      exclusions:
        type: string
      prerequisites:
        type: string
      breadths:
        type: string
      term_url:
        type: string
      ratings_url:
        type: string
  Comment:
    title: Comment
    required:
      - id
      - body
    type: object
    properties:
      id:
        type: integer
      body:
        type: string
      num_replies:
        type: integer
      replies:
        description: Comments that are replies to this comment
        type: array
        items:
          $ref: "#/definitions/Comment"
      comment_url:
        type: string
      course_url:
        type: string
      user_url:
        type: string
    example:
      id: 1
      body: "Here is a comment"
      num_replies: 1
      replies:
      - id: 2
        body: "This is a reply"
  Rating:
    type: object
    required:
      - user_id
      - course_id
      - rating_type
      - value
    properties:
      id:
        type: integer
      user_id:
        type: integer
        description: ID of the user creating the rating
      course_id:
        type: integer
        description: ID of the course which is being rated
      rating_type:
        type: string
        description: The type of rating
      value:
        type: boolean
        description: The actual rating
